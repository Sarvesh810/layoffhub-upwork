name: Deploy Backend to VPS

on:
  push:
    branches:
      - main
    paths:
      - "backend/**"
  workflow_dispatch: # Allows manual triggering of this workflow

jobs:
  deploy-backend:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v2

      # Step 2: Create .env file for Django settings
      - name: Create backend .env file
        working-directory: ./backend
        run: |
          echo "# Django Settings" >> .env
          echo "DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}" >> .env
          echo "DJANGO_DEBUG=${{ secrets.DJANGO_DEBUG }}" >> .env
          echo "DJANGO_ALLOWED_HOSTS=${{ secrets.DJANGO_ALLOWED_HOSTS }}" >> .env
          echo "" >> .env
          echo "# Database Settings" >> .env
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
          echo "DB_USER=${{ secrets.DB_USER }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
          echo "" >> .env
          echo "# Email Settings" >> .env
          echo "EMAIL_HOST=${{ secrets.EMAIL_HOST }}" >> .env
          echo "EMAIL_PORT=${{ secrets.EMAIL_PORT }}" >> .env
          echo "EMAIL_HOST_USER=${{ secrets.EMAIL_HOST_USER }}" >> .env
          echo "EMAIL_HOST_PASSWORD=${{ secrets.EMAIL_HOST_PASSWORD }}" >> .env
          echo "DEFAULT_FROM_EMAIL=${{ secrets.DEFAULT_FROM_EMAIL }}" >> .env
          echo "" >> .env
          echo "# CORS Settings" >> .env
          echo "CORS_ALLOWED_ORIGINS=${{ secrets.CORS_ALLOWED_ORIGINS }}" >> .env
          echo "CSRF_TRUSTED_ORIGINS=${{ secrets.CSRF_TRUSTED_ORIGINS }}" >> .env
          echo "" >> .env
          echo "# PGAdmin Settings" >> .env
          echo "PGADMIN_DEFAULT_EMAIL=${{ secrets.PGADMIN_DEFAULT_EMAIL }}" >> .env
          echo "PGADMIN_DEFAULT_PASSWORD=${{ secrets.PGADMIN_DEFAULT_PASSWORD }}" >> .env

      # Step 3: Set up SSH
      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh/
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

      # Step 4: Deploy to server
      - name: Deploy to VPS
        env:
          VPS_HOST: ${{ secrets.VPS_HOST }}
          VPS_USERNAME: ${{ secrets.VPS_USERNAME }}
        run: |
          # Copy .env, docker-compose, and backend code to the server
          scp ./backend/.env ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }}:/home/layoffhub/backend/
          scp ./backend/docker-compose.yml ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }}:/home/layoffhub/backend/
          rsync -avz ./backend/ ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }}:/home/layoffhub/backend/

          # SSH into the server and restart backend containers
          ssh ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }} '
            cd /home/layoffhub/backend &&
            docker-compose down &&
            docker system prune -f &&  # Clean up old images
            docker-compose up -d --build
          '
